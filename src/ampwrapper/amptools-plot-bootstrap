#!/usr/bin/env python3
import numpy as np
import json
from ampwrapper.utils import get_environment, wrap, list_selector, DEFAULT
import argparse
import sys
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import re


def main():
    env_path = get_environment()
    parser = argparse.ArgumentParser()
    with open(env_path, 'r') as env_file:
        env = json.load(env_file)
    if not env.get('studies'):
        print(wrap("You must initialize at least one AmpTools study using amptools-study!"))
        sys.exit(1)
    parser.add_argument('-s', '--study', help="study name")
    args = parser.parse_args()
    if args.study:
        study = env['studies'][args.study]
        if not study.get('bootstraps'):
            print(wrap(f"The study {args.study} has not been bootstrapped yet!"))
            sys.exit(1)
    else:
        fit_studies = []
        for study_name, study in env['studies'].items():
            if study.get('bootstraps'):
                fit_studies.append(study_name)
        args.study, cancel = list_selector(fit_studies)
        if cancel:
            print(wrap("User cancelled operation!"))
            sys.exit(1)
        study = env['studies'][args.study]
    res_config, cancel = list_selector(study['bootstraps'])
    if cancel:
        sys.exit(0)
    csv_list = [str(p.resolve()) for p in Path(study['directory']).glob(f"{res_config}_results_bootstrap*.csv")]
    print(csv_list)
    if len(csv_list) == 1:
        res_file = csv_list[0]
    else:
        res_file, cancel = list_selector(csv_list)
        if cancel:
            print(wrap("User cancelled operation!"))
            sys.exit(1)
    res_file = Path(res_file)
    fit_res_file = Path(study['directory']) / f"{res_config}_results.csv"
    out_file = Path(study['directory']) / f"plot_{Path(res_file).stem}.pdf"
    df = pd.read_csv(res_file)
    fit_df = pd.read_csv(fit_res_file)
    centers = (np.array(study['edges'][1:]) + np.array(study['edges'][:-1]))/2
    df['center'] = centers[df['bin']]
    fit_df['center'] = centers[fit_df['bin']]
    bin_dfs = [df.loc[df['bin'] == i_bin] for i_bin in range(study['nbins'])]
    fit_bin_dfs = [fit_df.loc[fit_df['bin'] == i_bin] for i_bin in range(study['nbins'])]
    best_df = pd.concat([bin_df[bin_df['likelihood'] == bin_df['likelihood'].max()] for bin_df in bin_dfs])
    best_df = best_df.drop_duplicates(subset=['bin'])
    if not best_df:
        print(wrap("No best fit found for any bins, make sure results have been collected!"))
        sys.exit(1)
    best_fit_df = pd.concat([fit_bin_df[fit_bin_df['likelihood'] == fit_bin_df['likelihood'].max()] for fit_bin_df in fit_bin_dfs])
    best_fit_df = best_fit_df.drop_duplicates(subset=['bin'])
    if not best_fit_df:
        print(wrap("No best fit found for any bootstrapped bins, make sure results have been collected!"))
        sys.exit(1)
    ### Get amplitude info and names: ..._m.group(0) = amplitude key, group(1) = J, group(2) = M, group(3) = R
    amp_int_m = list(filter(None, [re.search(r"^AMP_(\d)([+|-]\d)([+|-]\d)(\w*)@int$", col) for col in df.columns]))
    # Add errors from bootstrap to each amplitude
    for i_bin in range(study['nbins']):
        for amp_m in amp_int_m:
            amp_name = amp_m.group(0)
            best_fit_df.loc[best_fit_df['bin'] == i_bin, amp_name + "@err"] = bin_dfs[i_bin][amp_name].std()
            best_fit_df.loc[best_fit_df['bin'] == i_bin, amp_name + "@acc@err"] = bin_dfs[i_bin][amp_name + "@acc"].std()
    amp_JMs = sorted(set(([m.group(1, 2) for m in amp_int_m])))
    with PdfPages(out_file) as pdf:
        for JM in amp_JMs:
            amplitudes_to_plot_m = list(sorted(filter(lambda m: m.group(1, 2) == JM, amp_int_m), key=lambda m: m.group(3)))
            if amplitudes_to_plot_m:
                J = int(JM[0])
                M = int(JM[1])
                print(f"Plotting: best J={J} M={M} histogram")
                plt.figure(figsize=(10, 6))
                for amp_m in amplitudes_to_plot_m:
                    amp_name = amp_m.group(0)
                    R = int(amp_m.group(3))
                    plt.errorbar(best_fit_df['center'], best_fit_df[amp_name + "@acc"], best_fit_df[amp_name + "@acc@err"], color=('red' if R > 0 else 'blue'), fmt='o', label=("+" if R > 0 else "-") + " Reflectivity")
                    bias_corrected = 2 * best_fit_df[amp_name + "@acc"] - np.array([bin_df[amp_name + "@acc"].mean() for bin_df in bin_dfs])
                    plt.scatter(best_fit_df['center'], bias_corrected, marker='o', facecolors='none', edgecolors=('red' if R > 0 else 'blue'))
                plt.hist(best_fit_df['center'], bins=study['edges'], weights=best_fit_df['total@int@acc'], histtype='step', color='black', label="Total")
                plt.title(f"J = {J} M = {M}")
                plt.ylim(ymin=0)
                plt.legend()
                pdf.savefig()
                plt.close()
        for amp_m in amp_int_m:
            print(f"Plotting: {amp_m.group(0)} violin plot")
            amp_name = amp_m.group(0)
            R = int(amp_m.group(3))
            plt.figure(figsize=(10, 6))
            data = [bin_df[amp_name + "@acc"].to_numpy() for bin_df in bin_dfs]
            for i, sub_data in enumerate(data):
                if sub_data.size == 0: # all fits failed:
                    data[i] = np.array([0])
            totals = [bin_df['total@int@acc'].to_numpy() for bin_df in bin_dfs]
            for i, sub_data in enumerate(totals):
                if sub_data.size == 0: # all fits failed:
                    totals[i] = np.array([0])
            plt.violinplot(data, positions=centers, widths=np.diff(centers)[0]*2)
            plt.violinplot(totals, positions=centers, widths=np.diff(centers)[0]*2)
            plt.scatter(best_fit_df['center'], best_fit_df["total@int@acc"], color='magenta', marker='o')
            plt.scatter(best_fit_df['center'], best_fit_df[amp_name + "@acc"], color='red', marker='o')
            bias_corrected = 2 * best_fit_df[amp_name + "@acc"] - np.array([bin_df[amp_name + "@acc"].mean() for bin_df in bin_dfs])
            plt.scatter(best_fit_df['center'], bias_corrected, marker='o', facecolors='none', edgecolors=('red' if R > 0 else 'blue'))
            plt.title(amp_m.group(0) + "@acc")
            plt.ylim(ymin=0)
            pdf.savefig()
            plt.close()
        for amp_m in amp_int_m:
            print(f"Plotting: {amp_m.group(0)} phase plot")
            plt.figure(figsize=(10, 6))
            amp_name = amp_m.group(0).replace("@int", "@amp")
            plt.scatter(best_fit_df['center'], np.abs(np.angle(list(map(complex, best_fit_df[amp_name].to_numpy())))))
            plt.title(amp_m.group(0) + " Phase")
            # plt.ylim(-np.pi, np.pi)
            plt.ylim(0, np.pi)
            pdf.savefig()
            plt.close()
    print(DEFAULT(f"Output saved to {out_file}"))

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
from ampwrapper.utils import wrap, DEFAULT
import argparse
from pathlib import Path
import json
import os
import logging
import sys

def setup(directory) -> None:
    """
    Creates a directory for AmpTools studies which includes a
    (hidden) environment file which handles variables shared
    across analyses, as well as subdirectories for storing data
    """
    directory.mkdir(parents=True, exist_ok=True)
    env_path = directory / f".env.json"
    with open(env_path, 'w') as env_file:
        json.dump(dict(), env_file)
    (directory / "DATA").mkdir(exist_ok=True)
    (directory / "GEN").mkdir(exist_ok=True)
    (directory / "ACC").mkdir(exist_ok=True)
    (directory / "BKG").mkdir(exist_ok=True)

def main() -> None:
    """
    Checks for an environment file generated by setup()
    and sets the current environment path in ~/.amptoolstools

    The purpose of this is to allow the user to run analyses
    and link files without having to always be in the environment
    directory or remember paths.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--directory", default=str(Path.cwd()), help="(optional) path to new environment directory (default is current directory)")
    args = parser.parse_args()
    directory = Path(args.directory)
    env_path = (directory / ".env.json").resolve()
    if not env_path.exists():
        print(wrap(f"No AmpTools environment found in {str(directory)}! Creating one now!"))
        setup()

    config_path = Path.home() / ".amptoolstools"
    config = {}
    if config_path.exists():
        with open(config_path, 'r') as config_file:
            config = json.load(config_file)
    config['path'] = str(env_path)

    with open(config_path, 'w') as config_file:
        json.dump(config, config_file)

    print(DEFAULT(f"The AmpTools environment located at {str(directory)} has been activated!", justify="center"))

if __name__ == "__main__":
    main()

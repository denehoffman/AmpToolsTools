#!/usr/bin/env python3
import argparse
import sys
from ampwrapper.utils import HDOUBLE, get_environment, DEFAULT
import json

def main(args):
    env_path = get_environment()
    
    
    for amp in args.amplitudes:
        if not len(amp.split("/")) == 3:
            print(f"Improper formatting on amplitude \"{amp}\"!")
            sys.exit(1)

    reaction = args.name
    particles = ["gamma", "proton", "ps", "vec_d1", "vec_d2"]

    file_types = ["DATA", "GEN", "ACC"]

    if not args.phase1:
        pol_tags = ["_AMO", "_000", "_045", "_090", "_135"]
        pol_values = ["0.00001", "0.3519", "0.3374", "0.3303", "0.3375"]
        pol_angles = ["0.0", "0.0", "45.0", "90.0", "135.0"]

        if not args.amo:
            pol_tags = pol_tags[1:]
            pol_angles = pol_angles[1:]
            pol_values = pol_values[1:]

    else:
        pol_tags_AngelOnly = ["_AMO", "_000", "_045", "_090", "_135"]
        pol_tags = ["_AMO_S17", "_AMO_S18", "_AMO_F18", 
                    "_000_S17", "_045_S17", "_090_S17", "_135_S17",
                    "_000_S18", "_045_S18", "_090_S18", "_135_S18",
                    "_000_F18", "_045_F18", "_090_F18", "_135_F18"]
        # AMO_S17, AMO_S18, AMO_F18,
        # S17: 000, 045, 090, 135
        # S18: ...
        # F18: ...
        pol_values = ["0.00001", "0.00001","0.00001",
                      "0.3537", "0.3484", "0.3472", "0.3512",
                      "0.3420", "0.3474", "0.3478", "0.3517",
                      "0.3563", "0.3403", "0.3430", "0.3523"]
        pol_angles = ["0.0", "0.0", "0.0",
                      "0.0", "45.0", "90.0", "135.0",
                      "0.0", "45.0", "90.0", "135.0",
                      "0.0", "45.0", "90.0", "135.0"]

        if not args.amo:
            pol_tags_AngelOnly = pol_tags_AngelOnly[1:]
            pol_tags = pol_tags[3:]
            pol_angles = pol_angles[3:]
            pol_values = pol_values[3:]
    

    if args.background:
        file_types.append("BKG")
        if args.phase1:
            print("bkg option is not valid for all Phase1 data")
            exit(1)

    # Write Header 
    HDOUBLE.width = 60
    header = HDOUBLE("This is an AmpTools configuration file written by " \
                     "amptools-cfg-PhiPi. Modify the contents with caution--" \
                     "amptools-fit uses @tags to replace placeholder contents " \
                     "like file paths, seeds, and initializations.") 
    
    out_string = "\n".join(["# " + line for line in header.split("\n")])
    out_string += "\n# Code for generating this file:\n# amptools-PhiPi-cfg "
    out_string = "\n# Code for generating this file:\n# amptools-PhiPi-cfg "
    
    #whether spin1 has S,D-wave at the same time
    JL_pair = [[int(amp.split("/")[0]), int(amp.split("/")[2])] for amp in args.amplitudes]

    SDratio_exist = False
    if ([1,0] in JL_pair) and ([1,2] in JL_pair):
        SDratio_exist = True
        spin1_S_position = JL_pair.index([1,0])
        spin1_D_position = JL_pair.index([1,2])


    # Start the file
    out_string += " ".join(sys.argv[1:])
    out_string += "\n\n"
    out_string += f"fit {reaction}\n"
    out_string += f"reaction {reaction} {' '.join(particles)}\n"

    # Write Constants
    out_string += "\n# Constants\n"
    for pol, polval, polang in zip(pol_tags, pol_values, pol_angles):
        out_string += f"define polVal{pol} {polval}\n"
        out_string += f"define polAngle{pol} {polang}\n"
    
    # Write Parameters
    out_string += "\n# Parameters\n"
    if args.phase1:
        out_string += f"parameter polScale{pol_tags_AngelOnly[0]} 1.0 fixed\n"
        for pol in pol_tags_AngelOnly[1:]:
            out_string += f"parameter polScale{pol} 1.0\n"
    else:
        out_string += f"parameter polScale{pol_tags[0]} 1.0 fixed\n"
        for pol in pol_tags[1:]:
            out_string += f"parameter polScale{pol} 1.0\n"

    if SDratio_exist:
        out_string += "parameter dsratio 1.0\n"


    # Write Loops
    out_string += "\n# Loops\n"
    reaction_loop = f"loop {reaction}"
    scale_loop = "loop LOOPSCALE"
    ni_loop = "loop LOOPNIFILE"

    if args.phase1:
        # S17, S18 ,F18 repeat 3 times
        for i in range(3):
            for pol in pol_tags_AngelOnly:
                scale_loop += f" [polScale{pol}]"

    for pol in pol_tags:
        reaction_loop += f" {reaction}{pol}"
        ni_loop += f" normint{pol}"
        if not args.phase1:
            scale_loop += f" [polScale{pol}]"
        
    out_string += f"{reaction_loop}\n"
    if args.phase1: out_string += "\n"
    out_string += f"{scale_loop}\n"
    if args.phase1: out_string += "\n"
    out_string += f"{ni_loop}\n"
    if args.phase1: out_string += "\n"

    for file_type in file_types:
        file_loop = f"loop LOOP{file_type}FILE"
        for pol in pol_tags:
            file_loop += f" @{file_type}{pol}"
        out_string += f"{file_loop}\n"
        if args.phase1: out_string += "\n"

    polang_loop = "loop LOOPPOLANG"
    polval_loop = "loop LOOPPOLVAL"
    for pol in pol_tags:
        polang_loop += f" polAngle{pol}"
        polval_loop += f" polVal{pol}"
    out_string += f"{polang_loop}\n"
    out_string += f"{polval_loop}\n"

    
    # Write Data Readers
    out_string += "\n# Paths\n"
    out_string += f"normintfile {reaction} LOOPNIFILE\n"
    out_string += f"data {reaction} ROOTDataReader LOOPDATAFILE\n"
    out_string += f"genmc {reaction} ROOTDataReader LOOPGENFILE\n"
    out_string += f"accmc {reaction} ROOTDataReader LOOPACCFILE\n"
    if "BKG" in file_types:
        out_string += f"bkgnd {reaction} ROOTDataReader LOOPBKGFILE\n"
        
    # Write Sums
    out_string += "\n# Sums\n"
    out_string += f"sum {reaction} ImagNegSign\n"
    out_string += f"sum {reaction} RealNegSign\n"
    out_string += f"sum {reaction} ImagPosSign\n"
    out_string += f"sum {reaction} RealPosSign\n"
    

    # Write comments about amplitude naming method
    out_string += "\n# Vec_ps_refl: Vector-Pseudoscalar amplitude in reflectivity basis"
    out_string += "\n# Vec_ps_refl parameters"
    out_string += '''
    # argument 1 : spin
    # argument 2 : spin_proj             
    # argument 3 : l
    # argument 4 : real (+1) or imaginary (-1) part
    # argument 5 : 1 + (+1/-1) * P_gamma
    # argument 6 : polarization angle
    # argument 7 : beam properties config file or fixed polarization
    # argument 8-11: (optional)dalitz parameters for 3-body vector decay'''
    out_string += "\n \n# The amplitudes naming method in AmpTools"
    out_string += '''
    # [Imag/Real][NegSign/PosSign]::[name] Vec_ps_refl argus
    # [Imag/Real]: "Imaginary part" or "Real part"
    # [NegSign/PosSign]: "-" or "+" before Polarization P_gamma
    # [name]: J_naturality_m_l, e.g. "1pps", "1p0s", "1pms", "1ppd", "1p0d", "1pmd", "1mpp", "1m0p", "1mmp"
        # J: spin = 0, 1, 2, ...
        # parity: p(+) or m(-)
        # m: spin_proj = m2, m, 0, p, p2
        # l: s, p, d, f, ... "s-wave, p-wave, d-wave ..."
        # Reflectivity is determined by [NegSign/PosSign] and [naturality]\n'''
    
    # Prepare for amplitues
    J_list = [int(amp.split("/")[0]) for amp in args.amplitudes]
    parity_list = [amp.split("/")[1] for amp in args.amplitudes]
    L_list = [int(amp.split("/")[2]) for amp in args.amplitudes]
    

    amp_dict = {} # all the waves 
    amp_dict_spin1D = {} # only spin 1 D-wave 
    # loop spin J
    for i in range(len(J_list)):
        spin_J = J_list[i]
        parity = parity_list[i]
        orbital_L = L_list[i]

        # check corresponding orbital angular momentum
        if spin_J == 1 and parity == "+":
            if orbital_L != 0 and orbital_L != 2:
                print("The input J/parity/L is not allowed for Phi-Pi")
                exit(0)
            natural = -1
        elif spin_J == 1 and parity == "-":
            if orbital_L != 1:
                print("The input J/parity/L is not allowed for Phi-Pi")
                exit(0)
            natural = 1
        elif spin_J == 0 and parity == "-":
            if orbital_L != 1:
                print("The input J/parity/L is not allowed for Phi-Pi")
                exit(0)
            natural = -1
        elif spin_J == 2 and parity == "+":
            if orbital_L != 2:
                print("The input J/parity/L is not allowed for Phi-Pi")
                exit(0)
            natural = 1
        elif spin_J == 2 and parity == "-":
            if orbital_L != 1:
                print("The input J/parity/L is not allowed for Phi-Pi")
                exit(0)
            natural = -1
        elif spin_J == 3 and parity == "+":
            if orbital_L != 2:
                print("The input J/parity/L is not allowed for Phi-Pi")
                exit(0)
            natural = -1
        else:
            print("The input J/parity is not allowed or the code doesn't include it")
            exit(0)


        if not SDratio_exist:
            # the structure is 'spin parity natural', which can be splitted later
            amp_dict[str(spin_J)+" "+str(parity)+" "+str(natural)] = []
            # loop M
            for m_value in range(-spin_J, spin_J+1):
                # m, orbital angulat momentum, sign_before_polarization
                amp_dict[str(spin_J)+" "+str(parity)+" "+str(natural)].append((m_value, orbital_L, 1))
                amp_dict[str(spin_J)+" "+str(parity)+" "+str(natural)].append((m_value, orbital_L, -1))
        else:
            # spin 1 D wave 
            if i==spin1_D_position:
                amp_dict_spin1D[str(spin_J)+" "+str(parity)+" "+str(natural)] = []
                for m_value in range(-spin_J, spin_J+1):
                    # m, orbital angulat momentum, sign_before_polarization
                    amp_dict_spin1D[str(spin_J)+" "+str(parity)+" "+str(natural)].append((m_value, orbital_L, 1))
                    amp_dict_spin1D[str(spin_J)+" "+str(parity)+" "+str(natural)].append((m_value, orbital_L, -1))

            # amp_dict NOW include all amplitudes EXCEPT spin1-D
            else:
                amp_dict[str(spin_J)+" "+str(parity)+" "+str(natural)] = []
                # loop M
                for m_value in range(-spin_J, spin_J+1):
                    # m, orbital angulat momentum, sign_before_polarization
                    amp_dict[str(spin_J)+" "+str(parity)+" "+str(natural)].append((m_value, orbital_L, 1))
                    amp_dict[str(spin_J)+" "+str(parity)+" "+str(natural)].append((m_value, orbital_L, -1))
            
    dict_m_value = {'-2': "m2", '-1': "m", '0': "0", '1': "p", '2': "p2"}
    dict_l_value = {'0': "s", '1': "p", '2':"d"}
    dict_parity_value = {'+': "p", '-': "m"}

    # Write Amplitudes
    out_string += "\n# Amplitudes\n"
    for spin_parity, MLSs in amp_dict.items():
        # split "spin parity"
        spin_J = int(spin_parity.split()[0])
        parity = spin_parity.split()[1]
        natural = spin_parity.split()[2]
        # Write comment
        out_string += f"# Spin {spin_J} ; Parity {parity} ; Natuality {natural}\n"

        parity_sign = dict_parity_value[f'{parity}']
        for m_value, l_value, Sign_polarization in MLSs:
            m_sign = dict_m_value[f'{m_value}']
            l_sign = dict_l_value[f'{l_value}']

            for part, real in zip(["Imag", "Real"], [False, True]):
                out_string += f"amplitude {reaction}::"
                if real:
                    out_string += f"{part}"
                    Imag_or_Real = 1
                else:
                    out_string += f"{part}"
                    Imag_or_Real = -1

                if Sign_polarization < 0:
                    out_string += "NegSign"
                else:
                    out_string += "PosSign"

                out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign} Vec_ps_refl"
                out_string += f" {spin_J} {m_value:+} {l_value} {Imag_or_Real:+} {Sign_polarization:+}"
                
                out_string += " LOOPPOLANG LOOPPOLVAL"
                out_string += "\n"
            
                # if len(tag.split('@')) > 1:
                #     out_string += f"amplitude {reaction}::"
                #     if R > 0:
                #         out_string += "Positive"
                #     else:
                #         out_string += "Negative"
                #     out_string += f"{part}::AMP_{L}{M:+}{R:+}{tag.split('@')[0]} {' '.join(tag.split('@')[1:])}\n"
    
    # if spin 1 S,D-waves exist at the same time, write spin 1 D amplitudes here
    if SDratio_exist:
        # just copy from above
        for spin_parity, MLSs in amp_dict_spin1D.items():
            # split "spin parity"
            spin_J = int(spin_parity.split()[0])
            parity = spin_parity.split()[1]
            natural = spin_parity.split()[2]
            # Write comment
            out_string += f"# Spin {spin_J} ; Parity {parity} ; Natuality {natural}\n"

            parity_sign = dict_parity_value[f'{parity}']
            for m_value, l_value, Sign_polarization in MLSs:
                m_sign = dict_m_value[f'{m_value}']
                l_sign = dict_l_value[f'{l_value}']

                for part, real in zip(["Imag", "Real"], [False, True]):
                    out_string += f"amplitude {reaction}::"
                    if real:
                        out_string += f"{part}"
                        Imag_or_Real = 1
                    else:
                        out_string += f"{part}"
                        Imag_or_Real = -1

                    if Sign_polarization < 0:
                        out_string += "NegSign"
                    else:
                        out_string += "PosSign"

                    out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign} Vec_ps_refl"
                    out_string += f" {spin_J} {m_value:+} {l_value} {Imag_or_Real:+} {Sign_polarization:+}"
                    
                    out_string += " LOOPPOLANG LOOPPOLVAL"
                    out_string += "\n"

    # Write Initialization
    out_string += "\n# Initialize Amplitudes\n"
    # Only constrain the first 2 amplitudes to be real
    need_real_RealNegSign = True
    need_real_RealPosSign = True

    for spin_parity, MLSs in amp_dict.items():
        # split "spin parity"
        spin_J = int(spin_parity.split()[0])
        parity = spin_parity.split()[1]

        parity_sign = dict_parity_value[f'{parity}']
        for m_value, l_value, Sign_polarization in MLSs:
            m_sign = dict_m_value[f'{m_value}']
            l_sign = dict_l_value[f'{l_value}']
            
            out_string += f"initialize {reaction}::"

            if Sign_polarization > 0:
                out_string += "RealPosSign::"
                out_string += f"{spin_J}{parity_sign}{m_sign}{l_sign} polar"
                if need_real_RealPosSign:
                    out_string += " @uniform 0.0 real\n"
                    need_real_RealPosSign = False
                else:
                    out_string += " @uniform @polaruniform\n"
            else:
                out_string += "RealNegSign::"
                out_string += f"{spin_J}{parity_sign}{m_sign}{l_sign} polar"
                if need_real_RealNegSign:
                    out_string += " @uniform 0.0 real\n"
                    need_real_RealNegSign = False
                else:
                    out_string += " @uniform @polaruniform\n"

    # Write Constraints
    out_string += "\n# Constrain Amplitudes\n"
    # write comments
    out_string += "# 1. RealNegSign <-> ImagPosSign, RealPosSign <-> ImagNegSign coefficients are equal\n"
    out_string += "# 2. Polarization constrain\n"

    for spin_parity, MLSs in amp_dict.items():
        # split "spin parity"
        spin_J = int(spin_parity.split()[0])
        parity = spin_parity.split()[1]

        parity_sign = dict_parity_value[f'{parity}']
        for m_value, l_value, Sign_polarization in MLSs:
            m_sign = dict_m_value[f'{m_value}']
            l_sign = dict_l_value[f'{l_value}']
            
            # Re <-> Im constrain
            out_string += f"constrain {reaction}::"
            out_string += "Real"
            if Sign_polarization > 0:
                out_string += "PosSign"
                out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign} "
                out_string += f"{reaction}::"
                out_string += f"ImagNegSign::{spin_J}{parity_sign}{m_sign}{l_sign}\n"

            else:
                out_string += "NegSign"
                out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign} "
                out_string += f"{reaction}::"
                out_string += f"ImagPosSign::{spin_J}{parity_sign}{m_sign}{l_sign}\n"


            # Polarization constrain
            # PARA_0 part
            out_string += "constrain"
            out_string += f" {reaction}{pol_tags[0]}::Real"
            if Sign_polarization > 0:
                out_string += "PosSign"
            else:
                out_string += "NegSign"
            out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign}"
            # Looped parts
            out_string += f" {reaction}::Real"
            if Sign_polarization > 0:
                out_string += "PosSign"
            else:
                out_string += "NegSign"
            out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign}\n"


    # Constrain S,D-wave coefficients the same; Then scale D-wave by D to S ratio.
    if SDratio_exist:
        out_string += "\n# Constrain S,D-wave coefficients the same; Then scale D-wave by D to S ratio\n"

        for spin_parity, MLSs in amp_dict_spin1D.items():
            # split "spin parity"
            spin_J = int(spin_parity.split()[0])
            parity = spin_parity.split()[1]

            parity_sign = dict_parity_value[f'{parity}']
            for m_value, l_value, Sign_polarization in MLSs:
                m_sign = dict_m_value[f'{m_value}']
                l_sign = dict_l_value[f'{l_value}']

                if Sign_polarization > 0:
                    sign_polar_string = "PosSign"
                else:
                    sign_polar_string = "NegSign"

                # Real part
                out_string += f"constrain {reaction}::Real"
                out_string += sign_polar_string
                out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign}"
                # spin 1 S-wave has only L different from spin 1 D-wave
                out_string += f" {reaction}::Real"
                out_string += sign_polar_string
                out_string += f"::{spin_J}{parity_sign}{m_sign}s\n"

                # Imaginary part
                out_string += f"constrain {reaction}::Imag"
                out_string += sign_polar_string
                out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign}"
                # spin 1 S-wave has only L different from spin 1 D-wave
                out_string += f" {reaction}::Imag"
                out_string += sign_polar_string
                out_string += f"::{spin_J}{parity_sign}{m_sign}s\n"


    # Write Scales
    out_string += "\n# Scale Amplitudes\n"
    for spin_parity, MLSs in amp_dict.items():
        spin_J = int(spin_parity.split()[0])
        parity = spin_parity.split()[1]

        parity_sign = dict_parity_value[f'{parity}']
        for m_value, l_value, Sign_polarization in MLSs:
            m_sign = dict_m_value[f'{m_value}']
            l_sign = dict_l_value[f'{l_value}']

            if Sign_polarization > 0:
                sign_polar_string = "PosSign"
            else:
                sign_polar_string = "NegSign"

            # Real Part
            out_string += f"scale {reaction}::Real"
            out_string += sign_polar_string
            out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign} LOOPSCALE\n"

            # Imaginary Part
            out_string += f"scale {reaction}::Imag"
            out_string += sign_polar_string
            out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign} LOOPSCALE\n"

    if SDratio_exist:
        out_string += "\n# spin 1 D-wave should be scaled by both polarization and D-to-S ratio\n"
        #Polarization scale
        out_string += "#Polarization scale\n"
        for spin_parity, MLSs in amp_dict_spin1D.items():
            # split "spin parity"
            spin_J = int(spin_parity.split()[0])
            parity = spin_parity.split()[1]

            parity_sign = dict_parity_value[f'{parity}']
            for m_value, l_value, Sign_polarization in MLSs:
                m_sign = dict_m_value[f'{m_value}']
                l_sign = dict_l_value[f'{l_value}']

                if Sign_polarization > 0:
                    sign_polar_string = "PosSign"
                else:
                    sign_polar_string = "NegSign"

                # Real Part
                out_string += f"scale {reaction}::Real"
                out_string += sign_polar_string
                out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign} LOOPSCALE\n"
                # Imaginary Part
                out_string += f"scale {reaction}::Imag"
                out_string += sign_polar_string
                out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign} LOOPSCALE\n"
        
        #scale D-to-S ratio
        out_string += "#scale D-to-S ratio\n"
        for spin_parity, MLSs in amp_dict_spin1D.items():
            # split "spin parity"
            spin_J = int(spin_parity.split()[0])
            parity = spin_parity.split()[1]

            parity_sign = dict_parity_value[f'{parity}']
            for m_value, l_value, Sign_polarization in MLSs:
                m_sign = dict_m_value[f'{m_value}']
                l_sign = dict_l_value[f'{l_value}']

                if Sign_polarization > 0:
                    sign_polar_string = "PosSign"
                else:
                    sign_polar_string = "NegSign"
                
                # Real Part
                out_string += f"scale {reaction}::Real"
                out_string += sign_polar_string
                out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign} [dsratio]\n"
                # Imaginary Part
                out_string += f"scale {reaction}::Imag"
                out_string += sign_polar_string
                out_string += f"::{spin_J}{parity_sign}{m_sign}{l_sign} [dsratio]\n"

    
    # End
    out_string += "\n\n# END OF CONFIGURATION FILE"

    if args.output == None:
        print(out_string)
    else:
        file_name = args.output
        with open(env_path, 'r') as env_file:
            env = json.load(env_file)
        env_parent = env_path.parent
        config_path = env_parent / "configs"
        config_path.mkdir(exist_ok=True)
        file_path = config_path / f"{file_name}.cfg"
        with open(file_path, 'w') as config_file:
            config_file.write(out_string)
        print(DEFAULT(f"An AmpTools Configuration has been created and saved to {str(file_path.resolve())}. Use amptools-fit to run a fit using this configuration."))

    # file_name = args.output
    # file_path = f"./{file_name}.cfg"
    # with open(file_path, 'w') as config_file:
    #          config_file.write(out_string)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    description = DEFAULT("""This script generates an AmpTools configuration file for Phi-Pi system. Supply vector-pseudoscalar amplitudes in the format J/parity/L (separated by backslashes) where "J", "parity", and "L" are the particle X spin(0,1,2), parity(+,-), and orbital anglular momentum between 2 decay daughters.(1/+/0 1/+/2)""", replace_whitespace=False)
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('amplitudes', nargs="+", help="list of amplitudes to include, formatted as J/Parity/L")
    parser.add_argument('-b', '--background', action="store_true", help="use a separate set of background files")
    parser.add_argument('-o', '--output', help="name for output configuration file")
    parser.add_argument('--amo', action="store_true", help="include amorphous runs")
    parser.add_argument('-n', '--name', help="reaction name", default="default")
    parser.add_argument('--phase1', action="store_true", help="use all phase1 data")
    # parser.add_argument('--pol-files', action="store_true", help="use separate files for each polarization")
    # parser.add_argument('--add-pol-info', action="store_true", help="polarization information is NOT included in the ROOT file's beam photon four-vector")
    
    args = parser.parse_args()
    main(args)

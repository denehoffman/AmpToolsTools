#!/usr/bin/env python3
import argparse
from ampwrapper.utils import file_selector, get_environment, wrap, get_binning, split_mass, split_mass_halld_sim
import sys
from pathlib import Path
import numpy as np
import uproot
import enlighten
import json

def main():
    """
    Creates a new directory to contain a "study" for AmpTools

    Each study consists of one set of files with a fixed binning.
    However, a study can utilize multiple AmpTools configuration
    files. Information about file paths and binning is stored in
    a dictionary which is written to the .env.json file for future
    reference.

    This script also divides the input files according to the
    provided binning.

    If any of the paths are not provided, file pickers will open
    in a command line interface to allow for their selection
    from ROOT files stored in the environment's subdirectories
    (amptools-link). Paths outside these subdirectories can also
    be provided.

    If no binning arguments are provided, a command line interface
    will appear which will allow the user to view the invariant
    mass of the intermediate state and adjust bounds and binning.

    Finally, the program will split the ROOT files into mass bins
    and store those split files in subdirectories of the study
    directory.
    """
    env_path = get_environment()
    parser = argparse.ArgumentParser()

    parser.add_argument("name", help="study name")
    parser.add_argument("-d", "--data", dest="DATA", nargs='+', help="path(s) to data files (optional)")
    parser.add_argument("-g", "--gen", dest="GEN", nargs='+', help="path(s) to generated MC files (optional)")
    parser.add_argument("-a", "--acc", dest="ACC", nargs='+', help="path(s) to accepted MC files (optional)")
    parser.add_argument("-b", "--bkg", dest="BKG", nargs='+', help="path(s) to background files (optional)")
    parser.add_argument("--use-background", action="store_true", help="prompt for file selector if -b/--bkg option is left blank")

    parser.add_argument("-n", "--nbins", type=int, help="number of bins (set to 1 for an unbinned study)")
    parser.add_argument("--low", type=float, help="lower edge for data selection")
    parser.add_argument("--high", type=float, help="lower edge for data selection")

    args = parser.parse_args()
    args_dict = args.__dict__

    study = {}
    study['directory'] = str(env_path.parent / args.name)
    if Path(study['directory']).is_dir():
        if not any(Path(study['directory']).iterdir()):
            print(wrap(f"The directory {study['directory']} already exists, use a different name!"))
            sys.exit(1)
    Path(study['directory']).mkdir(exist_ok=True)
    study['unbinned'] = (args.nbins == 1)

    args_provided = [not arg is None for arg in [args.nbins, args.low, args.high]]
    if not all(args_provided):
        if any(args_provided):
            print(wrap("You must either supply all of the arguments for -n/--nbins, --low, and --high or leave them all blank to manually select them!"))
            sys.exit(1)
    # Gather all files based on user input. If no input is given, file selection dialog will appear.
    study_paths = {}

    for filetype in ["DATA", "GEN", "ACC"]:
        if args_dict[filetype] is None:
            study_paths[filetype], canceled = file_selector(env_path.parent / filetype, multiselect=True, suffix=".root")
            if canceled:
                print(wrap("User canceled the operation!"))
                sys.exit(1)
        else:
            study_paths[filetype] = [str(Path(path).resolve()) for path in args_dict[filetype] if path.endswith(".root")]
        (Path(study['directory']) / filetype).mkdir(exist_ok=True)

    if args_dict["BKG"] is None:
        if args.use_background:
            study_paths["BKG"], canceled = file_selector(env_path.parent / "BKG", multiselect=True, suffix=".root")
            study["background"] = True
            (Path(study['directory']) / "BKG").mkdir(exist_ok=True)
            if canceled:
                print(wrap("User canceled the operation!"))
                sys.exit(1)
        else:
            study_paths["BKG"] = ""
            study["background"] = False
    else:
        study_paths["BKG"] = [Path(path).resolve() for path in args_dict["BKG"] if path.endswith(".root")]
        study["background"] = True
        (Path(study['directory']) / "BKG").mkdir(exist_ok=True)

    study['paths'] = study_paths

    # If none of the binning arguments are given, create an interactive window which lets the user set them
    if not any(args_provided):
        data_masses = np.array([])
        data_weights = np.array([])
        for data_path in study['paths']['DATA']:
            with uproot.open(data_path) as tfile:
                ttree = tfile['kin']
                arrays = ttree.arrays(['M_FinalState', 'Weight'], library="pd")
                arrays.dropna(inplace=True)
                data_weights = np.append(data_weights, arrays['Weight'].to_numpy())
                data_masses = np.append(data_masses, arrays['M_FinalState'].to_numpy())
        for acc_path in study['paths']['ACC']:
            with uproot.open(acc_path) as tfile:
                ttree = tfile['kin']
                arrays = ttree.arrays(['M_FinalState', 'Weight'], library="pd")
                arrays.dropna(inplace=True)
                acc_weights = np.append(data_weights, arrays['Weight'].to_numpy())
                acc_masses = np.append(data_masses, arrays['M_FinalState'].to_numpy())
        nbins, low, high = get_binning(data_masses, acc_masses, weights=data_weights, acc_weights=acc_weights) # get_binning opens a histogram in the terminal
        study['nbins'] = nbins
        study['low'] = low
        study['high'] = high
    else:
        study['nbins'] = args.nbins
        study['low'] = args.low
        study['high'] = args.high
    step = (study['high'] - study['low']) / study['nbins']
    study['edges'] = [round(edge, 3) for edge in np.arange(study['low'], study['high'] + step, step)]


    # Split data into mass bins
    filetypes = ['DATA', 'GEN', 'ACC']
    if study['background']:
        filetypes.append('BKG')

    for filetype in filetypes:
        manager = enlighten.get_manager()
        pbar = manager.counter(total=len(study['paths'][filetype]), desc=filetype, unit='files')
        for f in pbar(study['paths'][filetype]):
            split_mass_halld_sim(Path(f), output_dir=Path(study['directory']) / filetype, low=study['low'], high=study['high'], nbins=study['nbins'], manager=manager)
            #split_mass(Path(f), output_dir=Path(study['directory']) / filetype, low=study['low'], high=study['high'], nbins=study['nbins'], manager=manager)
        pbar.close()

    # Store info in .env.json file
    with open(env_path, 'r') as env_file:
        env = json.load(env_file)
    if not 'studies' in env.keys():
        env['studies'] = dict()
    env['studies'][args.name] = study
    with open(env_path, 'w') as env_file:
        json.dump(env, env_file, indent=4)

if __name__ == "__main__":
    main()
